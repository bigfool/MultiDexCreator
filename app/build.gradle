apply plugin: 'com.android.application'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.1"

    defaultConfig {
        applicationId "me.ycdev.android.demo.multidexcreator"
        minSdkVersion 9
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
    }

    signingConfigs {
        androidTestKey {
            storeFile file("apk.keystore")
            storePassword "android"
            keyAlias "android.testkey"
            keyPassword "android"
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.androidTestKey
        }

        release {
            signingConfig signingConfigs.androidTestKey

            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile fileTree(dir: 'libs', include: 'guava-18.0.jar')

    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:23.1.0'
    compile 'com.android.support:design:23.1.0'
    compile 'com.android.support:multidex:1.0.1'
}

afterEvaluate {
    println "afterEvaluate"
    tasks.matching {
        it.name.startsWith('dex')
    }.each { dx ->
        println "dex task found: " + dx.name
        dx.doFirst {
            def creatorJarFile = 'MultiDexCreator.jar'
            def secondaryDexClassesRules = 'secondaryDexClassesRules.txt'
            def mainDexClassesListFile = project.buildDir.absolutePath + '/outputs/mainDexClassesList.txt'
            def secondaryDexClassesListFile = project.buildDir.absolutePath + '/outputs/secondaryDexClassesList.txt'
            def classesProguardJarFile
            def proguardMappingFile

            if (dx.name.equals('dexDebug')) {
                classesProguardJarFile = 'build/intermediates/classes-proguard/debug/classes.jar'
                proguardMappingFile = 'build/outputs/mapping/debug/mapping.txt'
            } else if (dx.name.equals('dexRelease')) {
                classesProguardJarFile = 'build/intermediates/classes-proguard/release/classes.jar'
                proguardMappingFile = 'build/outputs/mapping/release/mapping.txt'
            } else {
                println "skip multi dex for task: " + dx.name
                return
            }

            println "Generating main dex classes list file..."
            exec {
                executable = 'java'
                args = ["-jar", creatorJarFile, classesProguardJarFile, proguardMappingFile,
                        secondaryDexClassesRules, mainDexClassesListFile, secondaryDexClassesListFile]
            }

            def file = new File(mainDexClassesListFile)
            if (file.exists()) {
                println "Add additional parameters for multi dex"
                if (additionalParameters == null) {
                    additionalParameters = []
                }
                additionalParameters += '--multi-dex'
                additionalParameters += '--main-dex-list=' + mainDexClassesListFile
                additionalParameters += '--minimal-main-dex'
            }
        }
    }
}